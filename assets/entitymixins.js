// Generated by CoffeeScript 1.7.1
Game.EntityMixins = {};

Game.EntityMixins.PlayerActor = {
  name: 'PlayerActor',
  groupName: 'Actor',
  init: function(template) {
    this._bossKills = template['bossKills'] || 0;
  },
  getBossKills: function() {
    return this._bossKills;
  },
  addBossKill: function() {
    return this._bossKills += 1;
  },
  act: function() {
    if (this._acting) {
      return;
    }
    this._acting = true;
    if (!this.isAlive()) {
      Game.Screen.playScreen.setGameEnded(true);
      Game.sendMessage(this, ' You have died... Press [Enter] to continue!');
    }
    Game.refresh();
    this.getMap().getEngine().lock();
    this.clearMessages();
    this._acting = false;
  }
};

Game.EntityMixins.FungusActor = {
  name: 'FungusActor',
  groupName: 'Actor',
  act: function() {}
};

Game.EntityMixins.WanderActor = {
  name: 'WanderActor',
  groupName: 'Actor',
  act: function() {
    var moveOffset;
    moveOffset = (Math.round(Math.random()) === 1 ? 1 : -1);
    if (Math.round(Math.random()) === 1) {
      this.tryMove(this.getX() + moveOffset, this.getY(), this.getZ());
    } else {
      this.tryMove(this.getX(), this.getY() + moveOffset, this.getZ());
    }
  }
};

Game.EntityMixins.Attacker = {
  name: 'Attacker',
  groupName: 'Attacker',
  init: function(template) {
    this._attackValue = template['attackValue'] || 1;
  },
  getAttackValue: function() {
    var modifier;
    modifier = 0;
    if (this.hasMixin(Game.EntityMixins.Equipper)) {
      if (this.getWeapon()) {
        modifier += this.getWeapon().getAttackValue();
      }
      if (this.getArmor()) {
        modifier += this.getArmor().getAttackValue();
      }
    }
    return this._attackValue + modifier;
  },
  attack: function(target) {
    var attack, damage, defense, max;
    if (target.hasMixin('Destructible')) {
      attack = this.getAttackValue();
      defense = target.getDefenseValue();
      max = Math.max(0, attack - defense);
      damage = 1 + Math.floor(Math.random() * max);
      Game.sendMessage(this, 'You strike the %s for %d damage!', [target.getName(), damage]);
      Game.sendMessage(target, 'The %s strikes you for %d damage!', [this.getName(), damage]);
      target.takeDamage(this, damage);
    }
  }
};

Game.EntityMixins.Destructible = {
  name: 'Destructible',
  init: function(template) {
    this._maxHp = template['maxHp'] || 10;
    this._hp = template['hp'] || this._maxHp;
    this._defenseValue = template['defenseValue'] || 0;
    this._weakness = template['weakness'] || 'none';
  },
  getDefenseValue: function() {
    var modifier;
    modifier = 0;
    if (this.hasMixin(Game.EntityMixins.Equipper)) {
      if (this.getWeapon()) {
        modifier += this.getWeapon().getDefenseValue();
      }
      if (this.getArmor()) {
        modifier += this.getArmor().getDefenseValue();
      }
    }
    return this._defenseValue + modifier;
  },
  getHp: function() {
    return this._hp;
  },
  getMaxHp: function() {
    return this._maxHp;
  },
  takeDamage: function(attacker, damage) {
    if (attacker.hasMixin(Game.EntityMixins.Equipper) && attacker._weapon !== null) {
      if (this._weakness === attacker.getWeapon()._name) {
        damage = 500;
        attacker.addBossKill();
        Game.sendMessage(attacker, "You have found the %s's weakness!", [this.getName()]);
        Game.sendMessage(attacker, "You strike the %s for %s damage!", [this.getName(), damage]);
        Game.sendMessage(attacker, 'You have killed %s out of 5 bosses!', [attacker.getBossKills()]);
        if (attacker.getBossKills() === 5) {
          Game.switchScreen(Game.Screen.winScreen);
        }
      }
      this._hp -= damage;
      if (this._hp <= 0) {
        Game.sendMessage(attacker, 'You kill the %s!', [this.getName()]);
        this.kill();
      }
    } else {
      this._hp -= damage;
      if (this._hp <= 0) {
        Game.sendMessage(attacker, 'You kill the %s!', [this.getName()]);
        this.kill();
      }
    }
  }
};

Game.EntityMixins.MessageRecipient = {
  name: 'MessageRecipient',
  init: function(template) {
    this._messages = [];
  },
  receiveMessage: function(message) {
    this._messages.push(message);
  },
  getMessages: function() {
    return this._messages;
  },
  clearMessages: function() {
    this._messages = [];
  }
};

Game.EntityMixins.Sight = {
  name: 'Sight',
  groupName: 'Sight',
  init: function(template) {
    this._sightRadius = template['sightRadius'] || 5;
  },
  getSightRadius: function() {
    return this._sightRadius;
  }
};

Game.sendMessage = function(recipient, message, args) {
  if (recipient.hasMixin(Game.EntityMixins.MessageRecipient)) {
    if (args) {
      message = vsprintf(message, args);
    }
    recipient.receiveMessage(message);
  }
};

Game.sendMessageNearby = function(map, centerX, centerY, centerZ, message, args) {
  var entities, i;
  if (args) {
    message = vsprintf(message, args);
  }
  entities = map.getEntitiesWithinRadius(centerX, centerY, centerZ, 5);
  i = 0;
  while (i < entities.length) {
    if (entities[i].hasMixin(Game.EntityMixins.MessageRecipient)) {
      entities[i].receiveMessage(message);
    }
    i++;
  }
};

Game.EntityMixins.InventoryHolder = {
  name: 'InventoryHolder',
  init: function(template) {
    var inventorySlots;
    inventorySlots = template['inventorySlots'] || 8;
    this._items = new Array(inventorySlots);
  },
  getItems: function() {
    return this._items;
  },
  getItem: function(i) {
    return this._items[i];
  },
  addItem: function(item) {
    var i;
    i = 0;
    while (i < this._items.length) {
      if (!this._items[i]) {
        this._items[i] = item;
        return true;
      }
      i++;
    }
    return false;
  },
  removeItem: function(i) {
    if (this._items[i] && this.hasMixin(Game.EntityMixins.Equipper)) {
      this.unequip()(this._items[i]);
    }
    this._items[i] = null;
  },
  canAddItem: function() {
    var i;
    i = 0;
    while (i < this._items.length) {
      if (!this._items[i]) {
        return true;
      }
      i++;
    }
    return false;
  },
  pickupItems: function(indices) {
    var added, i, mapItems;
    mapItems = this._map.getItemsAt(this.getX(), this.getY(), this.getZ());
    added = 0;
    i = 0;
    while (i < indices.length) {
      if (this.addItem(mapItems[indices[i] - added])) {
        mapItems.splice(indices[i] - added, 1);
        added++;
      } else {
        break;
      }
      i++;
    }
    this._map.setItemsAt(this.getX(), this.getY(), this.getZ(), mapItems);
    return added === indices.length;
  },
  dropItem: function(i) {
    if (this._items[i]) {
      if (this._map) {
        this._map.addItem(this.getX(), this.getY(), this.getZ(), this._items[i]);
      }
      this.removeItem(i);
    }
  }
};

Game.EntityMixins.Equipper = {
  name: 'Equipper',
  init: function(template) {
    this._weapon = null;
    this._armor = null;
  },
  wield: function(item) {
    this._weapon = item;
  },
  unwield: function() {
    this._weapon = null;
  },
  wear: function(item) {
    this._armor = item;
  },
  takeOff: function() {
    this._armor = null;
  },
  getWeapon: function() {
    return this._weapon;
  },
  getArmor: function() {
    return this._armor;
  },
  unequip: function(item) {
    if (this._weapon === item) {
      this.unwield();
    }
    if (this._armor === item) {
      this.takeOff();
    }
  }
};
