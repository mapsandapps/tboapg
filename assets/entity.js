// Generated by CoffeeScript 1.7.1
Game.Entity = function(properties) {
  properties = properties || {};
  Game.DynamicGlyph.call(this, properties);
  this._x = properties['x'] || 0;
  this._y = properties['y'] || 0;
  this._z = properties['z'] || 0;
  this._map = null;
  this._alive = true;
};

Game.Entity.extend(Game.DynamicGlyph);

Game.Entity.prototype.setX = function(x) {
  this._x = x;
};

Game.Entity.prototype.setY = function(y) {
  this._y = y;
};

Game.Entity.prototype.setZ = function(z) {
  this._z = z;
};

Game.Entity.prototype.setMap = function(map) {
  this._map = map;
};

Game.Entity.prototype.setPosition = function(x, y, z) {
  var oldX, oldY, oldZ;
  oldX = this._x;
  oldY = this._y;
  oldZ = this._z;
  this._x = x;
  this._y = y;
  this._z = z;
  if (this._map) {
    return this._map.updateEntityPosition(this, oldX, oldY, oldZ);
  }
};

Game.Entity.prototype.getX = function() {
  return this._x;
};

Game.Entity.prototype.getY = function() {
  return this._y;
};

Game.Entity.prototype.getZ = function() {
  return this._z;
};

Game.Entity.prototype.getMap = function() {
  return this._map;
};

Game.Entity.prototype.tryMove = function(x, y, z, map) {
  var currentTile, items, target, tile;
  map = this.getMap();
  tile = map.getTile(x, y, this.getZ());
  currentTile = map.getTile(this.getX(), this.getY(), this.getZ());
  target = map.getEntityAt(x, y, this.getZ());
  if (z < this.getZ()) {
    if (currentTile !== Game.Tile.stairsUpTile) {
      Game.sendMessage(this, "You can't go up here!");
    } else {
      Game.sendMessage(this, "You ascend to level %d!", [z + 1]);
      this.setPosition(x, y, z);
    }
  } else if (z > this.getZ()) {
    if (currentTile !== Game.Tile.stairsDownTile) {
      Game.sendMessage(this, "You can't go down here!");
    } else {
      this.setPosition(x, y, z);
      Game.sendMessage(this, "You descend to level %d!", [z + 1]);
    }
  } else if (target) {
    if (this.hasMixin("Attacker") && (this.hasMixin(Game.EntityMixins.PlayerActor) || target.hasMixin(Game.EntityMixins.PlayerActor))) {
      this.attack(target);
      return true;
    }
    return false;
  } else if (tile === Game.Tile.stairsDownTile || tile === Game.Tile.stairsUpTile) {
    Game.sendMessage(this, "Press 'u' to go upstairs or 'd' to go downstairs.");
    this.setPosition(x, y, z);
    return true;
  } else if (tile.isWalkable()) {
    this.setPosition(x, y, z);
    items = this.getMap().getItemsAt(x, y, z);
    if (items) {
      if (items.length === 1) {
        Game.sendMessage(this, 'You see %s.', [items[0].describeA()]);
      } else {
        Game.sendMessage(this, 'There are several objects here');
      }
    }
    return true;
  }
  return false;
};

Game.Entity.prototype.isAlive = function() {
  return this._alive;
};

Game.Entity.prototype.kill = function(message) {
  if (!this._alive) {
    return;
  }
  this._alive = false;
  if (message) {
    Game.sendMessage(this, message);
  } else {
    Game.sendMessage(this, 'You have died!');
  }
  if (this.hasMixin(Game.EntityMixins.PlayerActor)) {
    this.act();
  } else {
    this.getMap().removeEntity(this);
  }
};
