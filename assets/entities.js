// Generated by CoffeeScript 1.7.1
Game.Mixins = {};

Game.Mixins.Moveable = {
  name: 'Moveable',
  tryMove: function(x, y, z, map) {
    var currentTile, target, tile;
    map = this.getMap();
    tile = map.getTile(x, y, this.getZ());
    currentTile = map.getTile(this.getX(), this.getY(), this.getZ());
    target = map.getEntityAt(x, y, this.getZ());
    if (z < this.getZ()) {
      if (currentTile !== Game.Tile.stairsUpTile) {
        Game.sendMessage(this, "You can't go up here!");
      } else {
        Game.sendMessage(this, "You ascend to level %d!", [z + 1]);
        this.setPosition(x, y, z);
      }
    } else if (z > this.getZ()) {
      if (currentTile !== Game.Tile.stairsDownTile) {
        Game.sendMessage(this, "You can't go down here!");
      } else {
        this.setPosition(x, y, z);
        Game.sendMessage(this, "You descend to level %d!", [z + 1]);
      }
    } else if (target) {
      if (this.hasMixin('Attacker')) {
        this.attack(target);
        return true;
      } else {
        return false;
      }
    } else if (tile === Game.Tile.stairsDownTile || tile === Game.Tile.stairsUpTile) {
      Game.sendMessage(this, "Press 'u' to go upstairs or 'd' to go downstairs.");
      this.setPosition(x, y, z);
      return true;
    } else if (tile.isWalkable()) {
      this.setPosition(x, y, z);
      return true;
    }
    return false;
  }
};

Game.Mixins.PlayerActor = {
  name: 'PlayerActor',
  groupName: 'Actor',
  act: function() {
    Game.refresh();
    this.getMap().getEngine().lock();
    this.clearMessages();
  }
};

Game.Mixins.FungusActor = {
  name: 'FungusActor',
  groupName: 'Actor',
  act: function() {}
};

Game.Mixins.Attacker = {
  name: 'Attacker',
  groupName: 'Attacker',
  init: function(template) {
    this._attackValue = template['attackValue'] || 1;
  },
  getAttackValue: function() {
    return this._attackValue;
  },
  attack: function(target) {
    var attack, damage, defense, max;
    if (target.hasMixin('Destructible')) {
      attack = this.getAttackValue();
      defense = target.getDefenseValue();
      max = Math.max(0, attack - defense);
      damage = 1 + Math.floor(Math.random() * max);
      Game.sendMessage(this, 'You strike the %s for %d damage!', [target.getName(), damage]);
      Game.sendMessage(target, 'The %s strikes you for %d damage!', [this.getName(), damage]);
      target.takeDamage(this, damage);
    }
  }
};

Game.Mixins.Destructible = {
  name: 'Destructible',
  init: function(template) {
    this._maxHp = template['maxHp'] || 10;
    this._hp = template['hp'] || this._maxHp;
    this._defenseValue = template['defenseValue'] || 0;
  },
  getDefenseValue: function() {
    return this._defenseValue;
  },
  getHp: function() {
    return this._hp;
  },
  getMaxHp: function() {
    return this._maxHp;
  },
  takeDamage: function(attacker, damage) {
    var overkill, overkillMessage;
    this._hp -= damage;
    overkill = 0 - this._hp;
    if (overkill > 0) {
      overkillMessage = '%c{red}Overkill: ' + overkill + ' damage!';
    } else {
      overkillMessage = '';
    }
    if (this._hp <= 0) {
      Game.sendMessage(attacker, 'You kill the %s! %s', [this.getName(), overkillMessage]);
      Game.sendMessage(this, 'You die!', [0 - this._hp, overkillMessage]);
      this.getMap().removeEntity(this);
    }
  }
};

Game.Mixins.MessageRecipient = {
  name: 'MessageRecipient',
  init: function(template) {
    this._messages = [];
  },
  receiveMessage: function(message) {
    this._messages.push(message);
  },
  getMessages: function() {
    return this._messages;
  },
  clearMessages: function() {
    this._messages = [];
  }
};

Game.Mixins.Sight = {
  name: 'Sight',
  groupName: 'Sight',
  init: function(template) {
    this._sightRadius = template['sightRadius'] || 5;
  },
  getSightRadius: function() {
    return this._sightRadius;
  }
};

Game.sendMessage = function(recipient, message, args) {
  if (recipient.hasMixin(Game.Mixins.MessageRecipient)) {
    if (args) {
      message = vsprintf(message, args);
    }
    recipient.receiveMessage(message);
  }
};

Game.sendMessageNearby = function(map, centerX, centerY, centerZ, message, args) {
  var entities, i;
  if (args) {
    message = vsprintf(message, args);
  }
  entities = map.getEntitiesWithinRadius(centerX, centerY, centerZ, 5);
  i = 0;
  while (i < entities.length) {
    if (entities[i].hasMixin(Game.Mixins.MessageRecipient)) {
      entities[i].receiveMessage(message);
    }
    i++;
  }
};

Game.PlayerTemplate = {
  character: 'ï€‡',
  foreground: 'white',
  maxHp: 40,
  attackValue: 10,
  sightRadius: 6,
  mixins: [Game.Mixins.Moveable, Game.Mixins.PlayerActor, Game.Mixins.Attacker, Game.Mixins.Destructible, Game.Mixins.MessageRecipient, Game.Mixins.Sight]
};

Game.FungusTemplate = {
  name: 'fungus',
  character: 'F',
  foreground: 'green',
  maxHp: 10,
  mixins: [Game.Mixins.FungusActor, Game.Mixins.Destructible]
};
