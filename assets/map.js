// Generated by CoffeeScript 1.7.1
var downLoc, upLoc;

downLoc = [];

upLoc = [];

Game.Map = function(tiles, player) {
  var downPos, i, upPos, z;
  this._tiles = tiles;
  this._depth = tiles.length;
  this._width = tiles[0].length;
  this._height = tiles[0][0].length;
  this._fov = [];
  this.setupFov();
  this._entities = [];
  this._scheduler = new ROT.Scheduler.Simple();
  this._engine = new ROT.Engine(this._scheduler);
  this.addEntityAtRandomPosition(player, 0);
  z = 0;
  while (z < this._depth - 1) {
    downPos = this.getRandomFloorPosition(z);
    this._tiles[z][downPos.x][downPos.y] = Game.Tile.stairsDownTile;
    downLoc.push({
      z: z,
      x: downPos.x,
      y: downPos.y
    });
    z++;
  }
  z = 1;
  while (z < this._depth) {
    upPos = this.getRandomFloorPosition(z);
    this._tiles[z][upPos.x][upPos.y] = Game.Tile.stairsUpTile;
    upLoc.push({
      z: z,
      x: upPos.x,
      y: upPos.y
    });
    z++;
  }
  z = 0;
  while (z < this._depth) {
    i = 0;
    while (i < 10) {
      this.addEntityAtRandomPosition(new Game.Entity(Game.FungusTemplate), z);
      i++;
    }
    z++;
  }
};

Game.Map.prototype.getWidth = function() {
  return this._width;
};

Game.Map.prototype.getHeight = function() {
  return this._height;
};

Game.Map.prototype.getDepth = function() {
  return this._depth;
};

Game.Map.prototype.getTile = function(x, y, z) {
  if (x < 0 || x >= this._width || y < 0 || y >= this._height || z < 0 || z >= this._depth) {
    return Game.Tile.nullTile;
  } else {
    return this._tiles[z][x][y] || Game.Tile.nullTile;
  }
};

Game.Map.prototype.isEmptyFloor = function(x, y, z) {
  return this.getTile(x, y, z) === Game.Tile.floorTile && !this.getEntityAt(x, y, z);
};

Game.Map.prototype.setupFov = function() {
  var map, z;
  map = this;
  z = 0;
  while (z < this._depth) {
    (function() {
      var depth;
      depth = z;
      map._fov.push(new ROT.FOV.DiscreteShadowcasting(function(x, y) {
        return !map.getTile(x, y, depth).isBlockingLight();
      }, {
        topology: 4
      }));
    })();
    z++;
  }
};

Game.Map.prototype.getFov = function(depth) {
  return this._fov[depth];
};

Game.Map.prototype.getRandomFloorPosition = function(z) {
  var x, y;
  x = void 0;
  y = void 0;
  while (true) {
    x = Math.floor(Math.random() * this._width);
    y = Math.floor(Math.random() * this._height);
    if (!!this.isEmptyFloor(x, y, z)) {
      break;
    }
  }
  return {
    x: x,
    y: y,
    z: z
  };
};

Game.Map.prototype.getEngine = function() {
  return this._engine;
};

Game.Map.prototype.getEntities = function() {
  return this._entities;
};

Game.Map.prototype.getEntityAt = function(x, y, z) {
  var i;
  i = 0;
  while (i < this._entities.length) {
    if (this._entities[i].getX() === x && this._entities[i].getY() === y && this._entities[i].getZ() === z) {
      return this._entities[i];
    }
    i++;
  }
  return false;
};

Game.Map.prototype.getEntitiesWithinRadius = function(centerX, centerY, centerZ, radius) {
  var bottomY, i, leftX, results, rightX, topY;
  results = [];
  leftX = centerX - radius;
  rightX = centerX + radius;
  topY = centerY - radius;
  bottomY = centerY + radius;
  i = 0;
  while (i < this._entities.length) {
    if (this._entities[i].getX() >= leftX && this._entities[i].getX() <= rightX && this._entities[i].getY() >= topY && this._entities[i].getY() <= bottomY && this._entities[i].getZ() === centerZ) {
      results.push(this._entities[i]);
    }
    i++;
  }
  return results;
};

Game.Map.prototype.addEntity = function(entity) {
  if (entity.getX() < 0 || entity.getX() >= this._width || entity.getY() < 0 || entity.getY() >= this._height || entity.getZ() < 0 || entity.getZ() >= this._depth) {
    throw new Error('Adding entity out of bounds.');
  }
  entity.setMap(this);
  this._entities.push(entity);
  if (entity.hasMixin('Actor')) {
    return this._scheduler.add(entity, true);
  }
};

Game.Map.prototype.addEntityAtRandomPosition = function(entity, z) {
  var position;
  position = this.getRandomFloorPosition(z);
  entity.setX(position.x);
  entity.setY(position.y);
  entity.setZ(position.z);
  this.addEntity(entity);
};

Game.Map.prototype.removeEntity = function(entity) {
  var i;
  i = 0;
  while (i < this._entities.length) {
    if (this._entities[i] === entity) {
      this._entities.splice(i, 1);
      break;
    }
    i++;
  }
  if (entity.hasMixin('Actor')) {
    this._scheduler.remove(entity);
  }
};
