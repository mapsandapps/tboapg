// Generated by CoffeeScript 1.7.1
var downLoc, upLoc;

downLoc = [];

upLoc = [];

Game.Map = function(tiles, player) {
  var boss, bosses, downPos, i, item, items, upPos, z;
  this._tiles = tiles;
  this._depth = tiles.length;
  this._width = tiles[0].length;
  this._height = tiles[0][0].length;
  this._fov = [];
  this.setupFov();
  this._entities = {};
  this._items = {};
  this._scheduler = new ROT.Scheduler.Simple();
  this._engine = new ROT.Engine(this._scheduler);
  this.addEntityAtRandomPosition(player, 0);
  z = 0;
  while (z < this._depth - 1) {
    downPos = this.getRandomFloorPosition(z);
    this._tiles[z][downPos.x][downPos.y] = Game.Tile.stairsDownTile;
    downLoc.push({
      z: z,
      x: downPos.x,
      y: downPos.y
    });
    z++;
  }
  z = 1;
  while (z < this._depth) {
    upPos = this.getRandomFloorPosition(z);
    this._tiles[z][upPos.x][upPos.y] = Game.Tile.stairsUpTile;
    upLoc.push({
      z: z,
      x: upPos.x,
      y: upPos.y
    });
    z++;
  }
  items = ['bug', 'sun', 'umbrella', 'key', 'extinguisher'];
  items = items.randomize();
  bosses = ['plant', 'moon', 'cloud', 'lock', 'fire'];
  bosses = bosses.randomize();
  z = 0;
  while (z < this._depth) {
    i = 0;
    while (i < 15) {
      this.addEntityAtRandomPosition(Game.EntityRepository.createRandom(), z);
      i++;
    }
    item = items[z];
    this.addItemAtRandomPosition(Game.ItemRepository.create(item), z);
    boss = bosses[z];
    this.addEntityAtRandomPosition(Game.BossRepository.create(boss), z);
    z++;
  }
  this._explored = new Array(this._depth);
  this._setupExploredArray();
};

Game.Map.prototype._setupExploredArray = function() {
  var x, y, z;
  z = 0;
  while (z < this._depth) {
    this._explored[z] = new Array(this._width);
    x = 0;
    while (x < this._width) {
      this._explored[z][x] = new Array(this._height);
      y = 0;
      while (y < this._height) {
        this._explored[z][x][y] = false;
        y++;
      }
      x++;
    }
    z++;
  }
};

Game.Map.prototype.getWidth = function() {
  return this._width;
};

Game.Map.prototype.getHeight = function() {
  return this._height;
};

Game.Map.prototype.getDepth = function() {
  return this._depth;
};

Game.Map.prototype.getTile = function(x, y, z) {
  if (x < 0 || x >= this._width || y < 0 || y >= this._height || z < 0 || z >= this._depth) {
    return Game.Tile.nullTile;
  } else {
    return this._tiles[z][x][y] || Game.Tile.nullTile;
  }
};

Game.Map.prototype.isEmptyFloor = function(x, y, z) {
  return this.getTile(x, y, z) === Game.Tile.floorTile && !this.getEntityAt(x, y, z);
};

Game.Map.prototype.setExplored = function(x, y, z, state) {
  if (this.getTile(x, y, z) !== Game.Tile.nullTile) {
    this._explored[z][x][y] = state;
  }
};

Game.Map.prototype.isExplored = function(x, y, z) {
  if (this.getTile(x, y, z) !== Game.Tile.nullTile) {
    return this._explored[z][x][y];
  } else {
    return false;
  }
};

Game.Map.prototype.setupFov = function() {
  var map, z;
  map = this;
  z = 0;
  while (z < this._depth) {
    (function() {
      var depth;
      depth = z;
      map._fov.push(new ROT.FOV.DiscreteShadowcasting(function(x, y) {
        return !map.getTile(x, y, depth).isBlockingLight();
      }, {
        topology: 4
      }));
    })();
    z++;
  }
};

Game.Map.prototype.getFov = function(depth) {
  return this._fov[depth];
};

Game.Map.prototype.getRandomFloorPosition = function(z) {
  var x, y;
  x = void 0;
  y = void 0;
  while (true) {
    x = Math.floor(Math.random() * this._width);
    y = Math.floor(Math.random() * this._height);
    if (!!this.isEmptyFloor(x, y, z)) {
      break;
    }
  }
  return {
    x: x,
    y: y,
    z: z
  };
};

Game.Map.prototype.getEngine = function() {
  return this._engine;
};

Game.Map.prototype.getEntities = function() {
  return this._entities;
};

Game.Map.prototype.getEntityAt = function(x, y, z) {
  return this._entities[x + ',' + y + ',' + z];
};

Game.Map.prototype.getEntitiesWithinRadius = function(centerX, centerY, centerZ, radius) {
  var bottomY, entity, key, leftX, results, rightX, topY;
  results = [];
  leftX = centerX - radius;
  rightX = centerX + radius;
  topY = centerY - radius;
  bottomY = centerY + radius;
  for (key in this._entities) {
    entity = this._entities[key];
    if (entity.getX() >= leftX && entity.getX() <= rightX && entity.getY() >= topY && entity.getY() <= bottomY && entity.getZ() === centerZ) {
      results.push(entity);
    }
  }
  return results;
};

Game.Map.prototype.addEntityAtRandomPosition = function(entity, z) {
  var position;
  position = this.getRandomFloorPosition(z);
  entity.setX(position.x);
  entity.setY(position.y);
  entity.setZ(position.z);
  this.addEntity(entity);
};

Game.Map.prototype.addEntity = function(entity) {
  entity.setMap(this);
  this.updateEntityPosition(entity);
  if (entity.hasMixin('Actor')) {
    return this._scheduler.add(entity, true);
  }
};

Game.Map.prototype.removeEntity = function(entity) {
  var key;
  key = entity.getX() + ',' + entity.getY() + ',' + entity.getZ();
  if (this._entities[key] === entity) {
    delete this._entities[key];
  }
  if (entity.hasMixin('Actor')) {
    this._scheduler.remove(entity);
  }
};

Game.Map.prototype.updateEntityPosition = function(entity, oldX, oldY, oldZ) {
  var key, oldKey;
  if (oldX) {
    oldKey = oldX + ',' + oldY + ',' + oldZ;
    if (this._entities[oldKey] === entity) {
      delete this._entities[oldKey];
    }
  }
  if (entity.getX() < 0 || entity.getX() >= this._width || entity.getY() < 0 || entity.getY() >= this._height || entity.getZ() < 0 || entity.getZ() >= this._depth) {
    throw new Error("Entity's position is out of bounds.");
  }
  key = entity.getX() + ',' + entity.getY() + ',' + entity.getZ();
  if (this._entities[key]) {
    throw new Error('Tried to add an entity at an occupied position.');
  }
  this._entities[key] = entity;
};

Game.Map.prototype.getItemsAt = function(x, y, z) {
  return this._items[x + ',' + y + ',' + z];
};

Game.Map.prototype.setItemsAt = function(x, y, z, items) {
  var key;
  key = x + ',' + y + ',' + z;
  if (items.length === 0) {
    if (this._items[key]) {
      delete this._items[key];
    }
  } else {
    this._items[key] = items;
  }
};

Game.Map.prototype.addItem = function(x, y, z, item) {
  var key;
  key = x + ',' + y + ',' + z;
  if (this._items[key]) {
    this._items[key].push(item);
  } else {
    this._items[key] = [item];
  }
};

Game.Map.prototype.addItemAtRandomPosition = function(item, z) {
  var position;
  position = this.getRandomFloorPosition(z);
  this.addItem(position.x, position.y, position.z, item);
};
